<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other on z217&#39;s blog</title>
    <link>https://z217blog.cn/tags/other/</link>
    <description>Recent content in Other on z217&#39;s blog</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <copyright>Copyright © 2020–2025, z217 and the hugo authors, all rights reserved.</copyright>
    <lastBuildDate>Tue, 07 Sep 2021 22:20:53 +0800</lastBuildDate>
    <atom:link href="https://z217blog.cn/tags/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>秋招面试总结</title>
      <link>https://z217blog.cn/post/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 07 Sep 2021 22:20:53 +0800</pubDate>
      <guid>https://z217blog.cn/post/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h2 id=&#34;1-腾讯-wxg-微信支付&#34;&gt;1. 腾讯-WXG-微信支付&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-一面&#34;&gt;1.1 一面&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;C++&lt;/code&gt;了解吗 ( 不了解就没问了 )&lt;/li&gt;&#xA;&lt;li&gt;算法题：无序数组有序排列的最大相邻差值 ( 跟我说不能排序，搜了下答案是桶排序，迷惑 )&lt;/li&gt;&#xA;&lt;li&gt;算法题：$100$ 个样本找病毒&lt;/li&gt;&#xA;&lt;li&gt;算法题：二叉树深度 ( 递归和迭代 )&lt;/li&gt;&#xA;&lt;li&gt;实习项目&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Linux&lt;/code&gt;了解吗 ( 怕他往下问就说不了解了 )&lt;/li&gt;&#xA;&lt;li&gt;协程了解吗？&lt;/li&gt;&#xA;&lt;li&gt;什么时候用协程比较好&lt;/li&gt;&#xA;&lt;li&gt;协程切换的时候变化的东西和不变的东西 ( 没听懂啥意思 )&lt;/li&gt;&#xA;&lt;li&gt;唠家常 ( 哪里人，想在哪工作 )&lt;/li&gt;&#xA;&lt;li&gt;算法题：数组中的重复元素&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：因为跟他说技术栈是&lt;code&gt;Go&lt;/code&gt;所以就问协程了，第一道算法题没做出来，中间问题没听懂，但是莫名其妙地过了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-面委会一面&#34;&gt;1.2 面委会一面&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;实习项目&lt;/li&gt;&#xA;&lt;li&gt;数据库索引&lt;/li&gt;&#xA;&lt;li&gt;为什么要用&lt;code&gt;B+&lt;/code&gt;树&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;和&lt;code&gt;MySQL&lt;/code&gt;区别&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;的&lt;code&gt;I/O&lt;/code&gt;模型&lt;/li&gt;&#xA;&lt;li&gt;$epoll$ ， $LT$ 和 $ET$&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;持久化&lt;/li&gt;&#xA;&lt;li&gt;其他存储有了解吗 ( 跟他说&lt;code&gt;Kafka&lt;/code&gt;，他说&lt;code&gt;Kafka&lt;/code&gt;不是存储😂 )&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Kafka&lt;/code&gt;介绍下&lt;/li&gt;&#xA;&lt;li&gt;代码：直播间有热度，可以创建删除直播间，运营人员半小时一次查看 $Top 100$ 的直播间&lt;/li&gt;&#xA;&lt;li&gt;代码题展开，$Map$ 的实现，常用并发结构的实现&lt;/li&gt;&#xA;&lt;li&gt;学过&lt;code&gt;C++&lt;/code&gt;吗&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：被干碎了，代码题还看漏了，写成实时排序了，其实半小时一次并不用实时维护。&lt;/p&gt;&#xA;&lt;h3 id=&#34;13-面委会二面&#34;&gt;1.3 面委会二面&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;实习项目的技术难题和挑战&lt;/li&gt;&#xA;&lt;li&gt;实习项目继续问&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;RPC&lt;/code&gt;的理解&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;的&lt;code&gt;LRU&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;LRU&lt;/code&gt;和&lt;code&gt;LFU&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;海量数据排序 ( 内存装不下 )&lt;/li&gt;&#xA;&lt;li&gt;参加了啥竞赛 ( 没有 )&lt;/li&gt;&#xA;&lt;li&gt;在学校时候的优势和劣势&lt;/li&gt;&#xA;&lt;li&gt;学习心得 ( 你项目实践比较少啊😂 )&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：不知道面了个啥，感觉更像是个懂技术的&lt;code&gt;HR&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis底层数据结构实现</title>
      <link>https://z217blog.cn/post/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 25 Mar 2021 23:02:23 +0800</pubDate>
      <guid>https://z217blog.cn/post/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h2 id=&#34;1-对象&#34;&gt;1. 对象&lt;/h2&gt;&#xA;&lt;p&gt;        &lt;code&gt;Redis&lt;/code&gt;中的每个键值对都是由两个对象结构表示，定义在 $server.h$ 文件中。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 对象类型&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_STRING 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_LIST 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_SET 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ZSET 3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_HASH 4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_MODULE 5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_STREAM 6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 对象编码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_RAW 0 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// SDS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_INT 1 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 长整型&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_HT 2 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 字典&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_ZIPMAP 3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_LINKEDLIST 4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_ZIPLIST 5 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 压缩列表&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_INTSET 6 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 整数集合&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_SKIPLIST 7 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 跳表&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_EMBSTR 8 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// embstr编码的SDS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_QUICKLIST 9&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define OBJ_ENCODING_STREAM 10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 对象结构&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;redisObject&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 类型&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 编码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;lru&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LRU_BITS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 最后一次访问时间&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;refcount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 引用计数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 底层指针&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;robj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-sds&#34;&gt;1. &lt;code&gt;SDS&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;        &lt;strong&gt;简单动态字符串&lt;/strong&gt; ( $simple\ \ dynamic\ \ string$, $SDS$ ) 是&lt;code&gt;Redis&lt;/code&gt;中字符串的数据结构，定义在 $sds.h$ 头文件中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git常用指令汇总</title>
      <link>https://z217blog.cn/post/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 04 Aug 2020 19:36:05 +0000</pubDate>
      <guid>https://z217blog.cn/post/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h2 id=&#34;创建仓库init&#34;&gt;创建仓库/init&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git init&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建成功后当前目录下会生成一个&lt;code&gt;.git&lt;/code&gt;目录，用于跟踪和管理版本库。&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加文件add&#34;&gt;添加文件/add&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git add&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;.&lt;/code&gt; 自动添加本地所有修改。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提交commit&#34;&gt;提交/commit&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git commit&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$-m$ 增加提交信息。&lt;br&gt;&#xA;$-a$ 自动寻找修改的文件并提交。&lt;/p&gt;&#xA;&lt;h2 id=&#34;状态查看status&#34;&gt;状态查看/status&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git status&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$-s$ 简短输出。&lt;/p&gt;&#xA;&lt;h2 id=&#34;改动查看diffblame&#34;&gt;改动查看/diff&amp;amp;blame&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git diff&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$&amp;ndash;cached$ 显示暂存区的改动。&lt;br&gt;&#xA;$HEAD$ 查看所有改动。&lt;br&gt;&#xA;$&amp;ndash;stat$ 显示摘要。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git blame&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;文件修改记录。&lt;/p&gt;&#xA;&lt;h2 id=&#34;历史查看log&#34;&gt;历史查看/log&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git log&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;按时间由近到远排序，列出最近的三次提交。&lt;br&gt;&#xA;$-p\ \ [filename]$ 文件最后一次提交信息。&lt;br&gt;&#xA;$&amp;ndash;pretty=oneline$ 可以列出简略的信息。&lt;br&gt;&#xA;$&amp;ndash;graph$ 拓扑图显示。&lt;br&gt;&#xA;$&amp;ndash;reverse$ 逆向显示。&lt;br&gt;&#xA;$&amp;ndash;author=$ 查找指定作者。&lt;br&gt;&#xA;$&amp;ndash;since$, $&amp;ndash;before$, $&amp;ndash;util$, $&amp;ndash;after$ 指定日期。&lt;br&gt;&#xA;$&amp;ndash;decorate$ 显示标签。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提交撤销revert&#34;&gt;提交撤销/revert&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git revert&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;回退版本reset&#34;&gt;回退版本/reset&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git reset --hard HEAD^&#xA;git reset --hard HEAD~2&#xA;git reset --hard 56e7&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$HEAD$ 表示当前版本。&lt;code&gt;^&lt;/code&gt; 表示回退一个版本，可以输入多个 &lt;code&gt;^&lt;/code&gt;。$\sim$ 之后可以输入任意数字，表示回退对应数量的版本。也可以直接输入版本号，版本号通过 $git\ \ log$ 命令查询，使用版本号不仅可以回退版本，在错误回退版本之后，也可以前进到指定的版本，版本号可以不写全，但一定要写到&lt;code&gt;Git&lt;/code&gt;能识别出唯一一个版本为止。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JWT简介</title>
      <link>https://z217blog.cn/post/jwt%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 04 Aug 2020 16:41:22 +0800</pubDate>
      <guid>https://z217blog.cn/post/jwt%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/JSON_Web_Token&#34;&gt;JWT-Wikipedia&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;        &lt;code&gt;JWT&lt;/code&gt;( $JSON\ \ Web\ \ Token$ )是一种基于&lt;code&gt;JSON&lt;/code&gt;的用于创建可选签名或可选加密的数据的互联网标准。&lt;code&gt;Token&lt;/code&gt;使用一个私钥或者公钥进行签名，持有私钥或者公钥的一方可以验证令牌的合法性。&lt;code&gt;Token&lt;/code&gt;被设计为紧凑且安全的，尤其适用于&lt;code&gt;Web&lt;/code&gt;浏览器单点登录 ( &lt;code&gt;Single-sign-on&lt;/code&gt;, $SSO$ ) 场景。&lt;code&gt;JWT&lt;/code&gt;声明一般用于在身份提供者和服务提供者之间传递用户身份信息，或者用于业务流程要求的任何其他类型的声明。&lt;/p&gt;</description>
    </item>
    <item>
      <title>设计模式</title>
      <link>https://z217blog.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 10 Jul 2020 16:57:11 +0000</pubDate>
      <guid>https://z217blog.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;        设计模式常用的七大原则：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;单一职责原则——一个类应该只负责一项职责。&lt;/li&gt;&#xA;&lt;li&gt;接口隔离原则——一个类对应另一个类的依赖应该建立在最小的接口上。&lt;/li&gt;&#xA;&lt;li&gt;依赖倒转原则&#xA;&lt;ol&gt;&#xA;&lt;li&gt;高层模块不应依赖于低层模块&lt;/li&gt;&#xA;&lt;li&gt;抽象不应该依赖于细节&lt;/li&gt;&#xA;&lt;li&gt;面向接口编程（中心思想）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;里氏替换原则——所有引用基类的地方必须能透明的使用子类。&lt;/li&gt;&#xA;&lt;li&gt;开闭原则——软件实体对扩展开放，对修改关闭，用抽象构建框架，用实现扩展细节。&lt;/li&gt;&#xA;&lt;li&gt;迪米特法则——一个类应该将逻辑封装在内部，不对外泄露。&lt;/li&gt;&#xA;&lt;li&gt;合成复用原则——尽量使用合成/聚合方式&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;        23种设计模式的三种类型：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式；&lt;/li&gt;&#xA;&lt;li&gt;结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式；&lt;/li&gt;&#xA;&lt;li&gt;行为型模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式（责任链模式）。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;1单例模式&#34;&gt;1.单例模式&lt;/h2&gt;&#xA;&lt;p&gt;        单例模式，即采取一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（通常为静态方法）。单例模式有八种方式：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;饿汉式（静态常量）&lt;/li&gt;&#xA;&lt;li&gt;饿汉式（静态代码块）&lt;/li&gt;&#xA;&lt;li&gt;懒汉式（线程不安全）&lt;/li&gt;&#xA;&lt;li&gt;懒汉式（线程安全，同步方法）&lt;/li&gt;&#xA;&lt;li&gt;懒汉式（线程安全，同步代码块）&lt;/li&gt;&#xA;&lt;li&gt;双重检查&lt;/li&gt;&#xA;&lt;li&gt;静态内部类&lt;/li&gt;&#xA;&lt;li&gt;枚举&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;11-饿汉式静态常量&#34;&gt;1.1 饿汉式（静态常量）&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;构造器私有化（即不能通过 $new$ 创建实例）&lt;/li&gt;&#xA;&lt;li&gt;类内部创建对象&lt;/li&gt;&#xA;&lt;li&gt;向外暴露一个静态公共方法&lt;/li&gt;&#xA;&lt;li&gt;代码实现&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：写法简单，在类装载时实例化，避免了线程同步问题。&lt;br&gt;&#xA;&lt;strong&gt;缺点&lt;/strong&gt;：不是懒加载，可能存在内存资源的浪费。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-饿汉式静态代码块&#34;&gt;1.2 饿汉式（静态代码块）&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;构造器私有化&lt;/li&gt;&#xA;&lt;li&gt;类内部声明私有静态成员&lt;/li&gt;&#xA;&lt;li&gt;静态代码块内实例化&lt;/li&gt;&#xA;&lt;li&gt;$getInstance$ 公共静态方法实现&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Singleton2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Singleton2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;优缺点&lt;/strong&gt;同上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis笔记</title>
      <link>https://z217blog.cn/post/redis%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 10 May 2020 17:20:42 +0000</pubDate>
      <guid>https://z217blog.cn/post/redis%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;1-redis简介&#34;&gt;1. &lt;code&gt;Redis&lt;/code&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;NoSQL&lt;/code&gt;即 $Not-Only\ \ SQL$ ，是&lt;code&gt;RDBMS&lt;/code&gt;的补充。&lt;br&gt;&#xA;&lt;code&gt;Redis&lt;/code&gt;是一种&lt;code&gt;NoSQL&lt;/code&gt;数据库，是一个使用&lt;code&gt;C&lt;/code&gt;语言开发的开源的高性能键值对数据库，内部使用单线程机制进行工作。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$set\ \ [key]\ \ [value]$  添加信息,&lt;/li&gt;&#xA;&lt;li&gt;$get\ \ [key]$    查询信息，为空返回 $nil$ ,&lt;/li&gt;&#xA;&lt;li&gt;$del\ \ [key]$  删除信息，$1$ 代表删除成功,&lt;/li&gt;&#xA;&lt;li&gt;$clear$  清屏,&lt;/li&gt;&#xA;&lt;li&gt;$help\ \ [op]$  帮助,&lt;/li&gt;&#xA;&lt;li&gt;$time$  获取时间.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;2-数据类型&#34;&gt;2. 数据类型&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;采用键值对的方式存储，$key$ 为字符串，$value$ 则允许多种类型。&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-string&#34;&gt;2.1 &lt;code&gt;string&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;最简单的数据类型，最大存储量 $512MB$ ，&#xA;可以作为数字使用，最大值为 $java.lang.Long$ 类型的最大值，&#xA;允许以&lt;code&gt;JSON&lt;/code&gt;对象的方式存储数据，值中间不能有空白符&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$mset/mget$  获取多个数据&lt;/li&gt;&#xA;&lt;li&gt;$strlen$  获取字符个数&lt;/li&gt;&#xA;&lt;li&gt;$append$  追加，返回总长度，也可以用于添加信息&lt;/li&gt;&#xA;&lt;li&gt;$incr/incrby/incrbyfloat$  指定数据增加指定值，允许负数，返回数值&lt;/li&gt;&#xA;&lt;li&gt;$decr/decrby$  指定数据减少指定的值，允许负数，返回数值&lt;/li&gt;&#xA;&lt;li&gt;$setex/psetex$  设定数据周期，秒/毫秒&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;22-hash&#34;&gt;2.2 &lt;code&gt;hash&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;hash&lt;/code&gt; 属于 $value$ ，其中包含多组键值对，键称为 $field$ ，键值对较少时为类数组结构，较多时为 $HashMap$ 结构，$value$ 只能为 &lt;code&gt;string&lt;/code&gt; ，且最多只能有 $2^{32} - 1$ 组。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
