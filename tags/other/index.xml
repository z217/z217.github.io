<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other on z217&#39;s blog</title>
    <link>https://z217blog.cn/tags/other/</link>
    <description>Recent content in Other on z217&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright © 2020–2022, z217 and the hugo authors, all rights reserved.</copyright>
    <lastBuildDate>Tue, 07 Sep 2021 22:20:53 +0800</lastBuildDate><atom:link href="https://z217blog.cn/tags/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>秋招面试总结</title>
      <link>https://z217blog.cn/post/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 07 Sep 2021 22:20:53 +0800</pubDate>
      
      <guid>https://z217blog.cn/post/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>1. 腾讯-WXG-微信支付 1.1 一面 C++了解吗 ( 不了解就没问了 ) 算法题：无序数组有序排列的最大相邻差值 ( 跟我说不能排序，搜了下答案是桶排序，迷惑 ) 算法题：$100$ 个样本找病毒 算法题：二叉树深度 ( 递归和迭代 ) 实习项目 Linux了解吗 ( 怕他往下问就说不了解了 ) 协程了解吗？ 什么时候用协程比较好 协程切换的时候变化的东西和不变的东西 ( 没听懂啥意思 ) 唠家常 ( 哪里人，想在哪工作 ) 算法题：数组中的重复元素 总结：因为跟他说技术栈是Go所以就问协程了，第一道算法题没做出来，中间问题没听懂，但是莫名其妙地过了。
1.2 面委会一面 实习项目 数据库索引 为什么要用B+树 Redis和MySQL区别 Redis的I/O模型 $epoll$ ， $LT$ 和 $ET$ Redis持久化 其他存储有了解吗 ( 跟他说Kafka，他说Kafka不是存储😂 ) Kafka介绍下 代码：直播间有热度，可以创建删除直播间，运营人员半小时一次查看 $Top 100$ 的直播间 代码题展开，$Map$ 的实现，常用并发结构的实现 学过C++吗 总结：被干碎了，代码题还看漏了，写成实时排序了，其实半小时一次并不用实时维护。
1.3 面委会二面 实习项目的技术难题和挑战 实习项目继续问 RPC的理解 Redis的LRU LRU和LFU 海量数据排序 ( 内存装不下 ) 参加了啥竞赛 ( 没有 ) 在学校时候的优势和劣势 学习心得 ( 你项目实践比较少啊😂 ) 总结：不知道面了个啥，感觉更像是个懂技术的HR。</description>
    </item>
    
    <item>
      <title>Redis底层数据结构实现</title>
      <link>https://z217blog.cn/post/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 25 Mar 2021 23:02:23 +0800</pubDate>
      
      <guid>https://z217blog.cn/post/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>1. 对象 Redis中的每个键值对都是由两个对象结构表示，定义在 $server.h$ 文件中。
// 对象类型 #define OBJ_STRING 0 #define OBJ_LIST 1 #define OBJ_SET 2 #define OBJ_ZSET 3 #define OBJ_HASH 4 #define OBJ_MODULE 5 #define OBJ_STREAM 6 // 对象编码 #define OBJ_ENCODING_RAW 0 // SDS #define OBJ_ENCODING_INT 1 // 长整型 #define OBJ_ENCODING_HT 2 // 字典 #define OBJ_ENCODING_ZIPMAP 3 #define OBJ_ENCODING_LINKEDLIST 4 #define OBJ_ENCODING_ZIPLIST 5 // 压缩列表 #define OBJ_ENCODING_INTSET 6 // 整数集合 #define OBJ_ENCODING_SKIPLIST 7 // 跳表 #define OBJ_ENCODING_EMBSTR 8 // embstr编码的SDS #define OBJ_ENCODING_QUICKLIST 9 #define OBJ_ENCODING_STREAM 10 // 对象结构 typedef struct redisObject { unsigned type:4; // 类型 unsigned encoding:4; // 编码 unsigned lru:LRU_BITS; // 最后一次访问时间 int refcount; // 引用计数 void *ptr; // 底层指针 } robj; 1.</description>
    </item>
    
    <item>
      <title>Git常用指令汇总</title>
      <link>https://z217blog.cn/post/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 04 Aug 2020 19:36:05 +0000</pubDate>
      
      <guid>https://z217blog.cn/post/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/</guid>
      <description>创建仓库/init git init 创建成功后当前目录下会生成一个.git目录，用于跟踪和管理版本库。
添加文件/add git add . 自动添加本地所有修改。
提交/commit git commit $-m$ 增加提交信息。
$-a$ 自动寻找修改的文件并提交。
状态查看/status git status $-s$ 简短输出。
改动查看/diff&amp;amp;blame git diff $&amp;ndash;cached$ 显示暂存区的改动。
$HEAD$ 查看所有改动。
$&amp;ndash;stat$ 显示摘要。
git blame 文件修改记录。
历史查看/log git log 按时间由近到远排序，列出最近的三次提交。
$-p\ \ [filename]$ 文件最后一次提交信息。
$&amp;ndash;pretty=oneline$ 可以列出简略的信息。
$&amp;ndash;graph$ 拓扑图显示。
$&amp;ndash;reverse$ 逆向显示。
$&amp;ndash;author=$ 查找指定作者。
$&amp;ndash;since$, $&amp;ndash;before$, $&amp;ndash;util$, $&amp;ndash;after$ 指定日期。
$&amp;ndash;decorate$ 显示标签。
提交撤销/revert git revert 回退版本/reset git reset --hard HEAD^ git reset --hard HEAD~2 git reset --hard 56e7 $HEAD$ 表示当前版本。^ 表示回退一个版本，可以输入多个 ^。$\sim$ 之后可以输入任意数字，表示回退对应数量的版本。也可以直接输入版本号，版本号通过 $git\ \ log$ 命令查询，使用版本号不仅可以回退版本，在错误回退版本之后，也可以前进到指定的版本，版本号可以不写全，但一定要写到Git能识别出唯一一个版本为止。</description>
    </item>
    
    <item>
      <title>JWT简介</title>
      <link>https://z217blog.cn/post/jwt%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 04 Aug 2020 16:41:22 +0800</pubDate>
      
      <guid>https://z217blog.cn/post/jwt%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/JSON_Web_Token&#34;&gt;JWT-Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;        &lt;code&gt;JWT&lt;/code&gt;( $JSON\ \ Web\ \ Token$ )是一种基于&lt;code&gt;JSON&lt;/code&gt;的用于创建可选签名或可选加密的数据的互联网标准。&lt;code&gt;Token&lt;/code&gt;使用一个私钥或者公钥进行签名，持有私钥或者公钥的一方可以验证令牌的合法性。&lt;code&gt;Token&lt;/code&gt;被设计为紧凑且安全的，尤其适用于&lt;code&gt;Web&lt;/code&gt;浏览器单点登录 ( &lt;code&gt;Single-sign-on&lt;/code&gt;, $SSO$ ) 场景。&lt;code&gt;JWT&lt;/code&gt;声明一般用于在身份提供者和服务提供者之间传递用户身份信息，或者用于业务流程要求的任何其他类型的声明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://z217blog.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 10 Jul 2020 16:57:11 +0000</pubDate>
      
      <guid>https://z217blog.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>设计模式常用的七大原则：
单一职责原则——一个类应该只负责一项职责。 接口隔离原则——一个类对应另一个类的依赖应该建立在最小的接口上。 依赖倒转原则 高层模块不应依赖于低层模块 抽象不应该依赖于细节 面向接口编程（中心思想） 里氏替换原则——所有引用基类的地方必须能透明的使用子类。 开闭原则——软件实体对扩展开放，对修改关闭，用抽象构建框架，用实现扩展细节。 迪米特法则——一个类应该将逻辑封装在内部，不对外泄露。 合成复用原则——尽量使用合成/聚合方式 23种设计模式的三种类型：
创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式； 结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式； 行为型模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式（责任链模式）。 1.单例模式 单例模式，即采取一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（通常为静态方法）。单例模式有八种方式：
饿汉式（静态常量） 饿汉式（静态代码块） 懒汉式（线程不安全） 懒汉式（线程安全，同步方法） 懒汉式（线程安全，同步代码块） 双重检查 静态内部类 枚举 1.1 饿汉式（静态常量） 构造器私有化（即不能通过 $new$ 创建实例） 类内部创建对象 向外暴露一个静态公共方法 代码实现 class Singleton { private final static Singleton instance = new Singleton(); private Singleton() { } public static Singleton getInstance() { return instance; } } 优点：写法简单，在类装载时实例化，避免了线程同步问题。
缺点：不是懒加载，可能存在内存资源的浪费。
1.2 饿汉式（静态代码块） 构造器私有化 类内部声明私有静态成员 静态代码块内实例化 $getInstance$ 公共静态方法实现 class Singleton2 { private static Singleton2 instance; static { instance = new Singleton2(); } private Singleton2() {} public static Singleton2 getInstance() { return instance; } } 优缺点同上。</description>
    </item>
    
    <item>
      <title>Redis笔记</title>
      <link>https://z217blog.cn/post/redis%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 10 May 2020 17:20:42 +0000</pubDate>
      
      <guid>https://z217blog.cn/post/redis%E7%AC%94%E8%AE%B0/</guid>
      <description>1. Redis简介 NoSQL即 $Not-Only\ \ SQL$ ，是RDBMS的补充。
Redis是一种NoSQL数据库，是一个使用C语言开发的开源的高性能键值对数据库，内部使用单线程机制进行工作。
$set\ \ [key]\ \ [value]$ 添加信息, $get\ \ [key]$ 查询信息，为空返回 $nil$ , $del\ \ [key]$ 删除信息，$1$ 代表删除成功, $clear$ 清屏, $help\ \ [op]$ 帮助, $time$ 获取时间. 2. 数据类型 Redis采用键值对的方式存储，$key$ 为字符串，$value$ 则允许多种类型。
2.1 string 最简单的数据类型，最大存储量 $512MB$ ， 可以作为数字使用，最大值为 $java.lang.Long$ 类型的最大值， 允许以JSON对象的方式存储数据，值中间不能有空白符
$mset/mget$ 获取多个数据 $strlen$ 获取字符个数 $append$ 追加，返回总长度，也可以用于添加信息 $incr/incrby/incrbyfloat$ 指定数据增加指定值，允许负数，返回数值 $decr/decrby$ 指定数据减少指定的值，允许负数，返回数值 $setex/psetex$ 设定数据周期，秒/毫秒 2.2 hash hash 属于 $value$ ，其中包含多组键值对，键称为 $field$ ，键值对较少时为类数组结构，较多时为 $HashMap$ 结构，$value$ 只能为 string ，且最多只能有 $2^{32} - 1$ 组。</description>
    </item>
    
  </channel>
</rss>
